{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = this.initializeBoard()){\n        this.inicialState = initialState;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.futureState = [];\n        this.score = 0;\n        this.status = \"idle\";\n        this.startGame = false;\n    }\n    initializeBoard() {\n        const board = [];\n        for(let i = 0; i < 4; i++)board.push(Array(4).fill(0));\n        return board;\n    }\n    isEqual(fututreState, state) {\n        for(let row = 0; row < fututreState.length; row++)for(let col = 0; col < fututreState[row].length; col++){\n            if (fututreState[row][col] !== state[row][col]) return false;\n        }\n        return true;\n    }\n    moveLeft() {\n        if (!this.startGame) return;\n        for(let r = 0; r < 4; r++){\n            let row = [\n                ...this.state[r]\n            ];\n            row = this.slide(row);\n            this.futureState[r] = row;\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveRight() {\n        if (!this.startGame) return;\n        for(let r = 0; r < 4; r++){\n            let row = [\n                ...this.state[r]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.futureState[r] = row;\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveUp() {\n        if (!this.startGame) return;\n        this.futureState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < 4; c++){\n            let row = [\n                this.futureState[0][c],\n                this.futureState[1][c],\n                this.futureState[2][c],\n                this.futureState[3][c]\n            ];\n            row = this.slide(row);\n            for(let r = 0; r < 4; r++)this.futureState[r][c] = row[r];\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveDown() {\n        if (!this.startGame) return;\n        this.futureState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < 4; c++){\n            let row = [\n                this.futureState[0][c],\n                this.futureState[1][c],\n                this.futureState[2][c],\n                this.futureState[3][c]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            for(let r = 0; r < 4; r++)this.futureState[r][c] = row[r];\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    setBestScore(score, user) {\n        if (user === null || user < score) localStorage.setItem(\"user\", score);\n    }\n    getBestScore() {\n        const user = localStorage.getItem(\"user\");\n        if (user === null) return 0;\n        return user;\n    }\n    start() {\n        this.status = \"playing\";\n        this.startGame = true;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.setTwo();\n        this.setTwo();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.startGame = false;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    slide(row) {\n        let filterRow = this.filterZero(row);\n        for(let i = 0; i < filterRow.length; i++)if (filterRow[i] === filterRow[i + 1]) {\n            filterRow[i] *= 2;\n            filterRow[i + 1] = 0;\n            this.score += filterRow[i];\n        }\n        filterRow = this.filterZero(filterRow);\n        while(filterRow.length < 4)filterRow.push(0);\n        return filterRow;\n    }\n    filterZero(row) {\n        return row.filter((item)=>item !== 0);\n    }\n    updateTile(tile, num) {\n        tile.innerText = \"\";\n        tile.classList.value = \"\";\n        tile.classList.add(\"field__cell\");\n        if (num > 0) {\n            tile.innerText = num;\n            tile.classList.add(\"field__cell--\" + num.toString());\n        }\n    }\n    updateScore(el) {\n        el.innerText = this.score;\n    }\n    setTwo() {\n        if (!this.hasEmptyTile()) return;\n        let found = false;\n        while(!found){\n            const r = Math.floor(Math.random() * 4);\n            const c = Math.floor(Math.random() * 4);\n            if (this.state[r][c] === 0) {\n                const value = Math.random() < 0.9 ? 2 : 4;\n                this.state[r][c] = value;\n                found = true;\n            }\n        }\n    }\n    hasEmptyTile() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.state[r][c] === 0) return true;\n        }\n        return false;\n    }\n    isWin(state) {\n        state.forEach((row)=>{\n            row.forEach((col)=>{\n                if (col === 2048) this.status = \"win\";\n            });\n        });\n    }\n    isLose() {\n        for (const row of this.state){\n            if (row.some((i)=>i === 0)) return false;\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        for(let c = 0; c < 4; c++){\n            const row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$gameRefs = {\n    score: document.querySelector('[data-score=\"score\"]'),\n    best: document.querySelector('[data-best=\"best\"]'),\n    rows: document.querySelectorAll(\".field__cell\"),\n    start: document.querySelector(\".button\"),\n    field: document.querySelector(\".game__field\"),\n    messageWin: document.querySelector(\".message__content--win\"),\n    messageLose: document.querySelector(\".message__content--lose\"),\n    messageStart: document.querySelector(\".message__content--start\")\n};\nlet $09e991522ca7e64e$var$countKeyPress = 0;\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nif ($09e991522ca7e64e$var$gameRefs.score) $09e991522ca7e64e$var$gameRefs.score.innerText = $09e991522ca7e64e$var$game.getScore();\nif ($09e991522ca7e64e$var$gameRefs.best) $09e991522ca7e64e$var$gameRefs.best.innerText = $09e991522ca7e64e$var$game.getBestScore();\nfunction $09e991522ca7e64e$var$updateElement() {\n    for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n        const tile = document.getElementById(`${r}-${c}`);\n        const num = $09e991522ca7e64e$var$game.getState()[r][c];\n        $09e991522ca7e64e$var$game.updateTile(tile, num);\n        $09e991522ca7e64e$var$gameRefs.best.innerText = $09e991522ca7e64e$var$game.getBestScore();\n    }\n}\n$09e991522ca7e64e$var$updateElement();\n$09e991522ca7e64e$var$gameRefs.start.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$gameRefs.start.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateElement();\n        $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameRefs.score);\n        $09e991522ca7e64e$var$gameRefs.messageStart.classList.add(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$gameRefs.start.textContent === \"Restart\") {\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$gameRefs.messageWin.classList.add(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$gameRefs.messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$gameRefs.start.innerText = \"Start\";\n        $09e991522ca7e64e$var$gameRefs.start.classList.add(\"start\");\n        $09e991522ca7e64e$var$gameRefs.start.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$countKeyPress = 0;\n        $09e991522ca7e64e$var$updateElement();\n        $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameRefs.score);\n        $09e991522ca7e64e$var$gameRefs.messageStart.classList.remove(\"hidden\");\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") e.preventDefault();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"playing\":\n            switch(e.code){\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n                default:\n                    break;\n            }\n            $09e991522ca7e64e$var$updateElement();\n            $09e991522ca7e64e$var$countKeyPress++;\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$gameRefs.messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$gameRefs.messageLose.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameRefs.score);\n    const user = window.localStorage.getItem(\"user\");\n    $09e991522ca7e64e$var$game.setBestScore($09e991522ca7e64e$var$game.getScore(), user);\n    if ($09e991522ca7e64e$var$countKeyPress >= 1) {\n        $09e991522ca7e64e$var$gameRefs.start.innerText = \"Restart\";\n        $09e991522ca7e64e$var$gameRefs.start.classList.remove(\"start\");\n        $09e991522ca7e64e$var$gameRefs.start.classList.add(\"restart\");\n    }\n});\n\n\n//# sourceMappingURL=index.62c77362.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst gameRefs = {\n  score: document.querySelector('[data-score=\"score\"]'),\n  best: document.querySelector('[data-best=\"best\"]'),\n  rows: document.querySelectorAll('.field__cell'),\n  start: document.querySelector('.button'),\n  field: document.querySelector('.game__field'),\n  messageWin: document.querySelector('.message__content--win'),\n  messageLose: document.querySelector('.message__content--lose'),\n  messageStart: document.querySelector('.message__content--start'),\n};\n\nlet countKeyPress = 0;\n\nconst game = new Game();\n\nif (gameRefs.score) {\n  gameRefs.score.innerText = game.getScore();\n}\n\nif (gameRefs.best) {\n  gameRefs.best.innerText = game.getBestScore();\n}\n\nfunction updateElement() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = game.getState()[r][c];\n\n      game.updateTile(tile, num);\n      gameRefs.best.innerText = game.getBestScore();\n    }\n  }\n}\n\nupdateElement();\n\ngameRefs.start.addEventListener('click', () => {\n  if (gameRefs.start.textContent === 'Start') {\n    game.start();\n    updateElement();\n    game.updateScore(gameRefs.score);\n    gameRefs.messageStart.classList.add('hidden');\n  }\n\n  if (gameRefs.start.textContent === 'Restart') {\n    if (game.getStatus() === 'win') {\n      gameRefs.messageWin.classList.add('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      gameRefs.messageLose.classList.add('hidden');\n    }\n    game.restart();\n    gameRefs.start.innerText = 'Start';\n    gameRefs.start.classList.add('start');\n    gameRefs.start.classList.remove('restart');\n    countKeyPress = 0;\n    updateElement();\n    game.updateScore(gameRefs.score);\n    gameRefs.messageStart.classList.remove('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n    e.preventDefault();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  switch (game.getStatus()) {\n    case 'playing':\n      switch (e.code) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n        default:\n          break;\n      }\n\n      updateElement();\n      countKeyPress++;\n      break;\n    case 'win':\n      gameRefs.messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      gameRefs.messageLose.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n\n  game.updateScore(gameRefs.score);\n\n  const user = window.localStorage.getItem('user');\n\n  game.setBestScore(game.getScore(), user);\n\n  if (countKeyPress >= 1) {\n    gameRefs.start.innerText = 'Restart';\n    gameRefs.start.classList.remove('start');\n    gameRefs.start.classList.add('restart');\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = this.initializeBoard()) {\n    this.inicialState = initialState;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.futureState = [];\n    this.score = 0;\n    this.status = 'idle';\n    this.startGame = false;\n  }\n\n  initializeBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push(Array(4).fill(0));\n    }\n\n    return board;\n  }\n\n  isEqual(fututreState, state) {\n    for (let row = 0; row < fututreState.length; row++) {\n      for (let col = 0; col < fututreState[row].length; col++) {\n        if (fututreState[row][col] !== state[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row = this.slide(row);\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row = this.slide(row);\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  setBestScore(score, user) {\n    if (user === null || user < score) {\n      localStorage.setItem('user', score);\n    }\n  }\n\n  getBestScore() {\n    const user = localStorage.getItem('user');\n\n    if (user === null) {\n      return 0;\n    }\n\n    return user;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.startGame = true;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n\n    this.setTwo();\n    this.setTwo();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.startGame = false;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  slide(row) {\n    let filterRow = this.filterZero(row);\n\n    for (let i = 0; i < filterRow.length; i++) {\n      if (filterRow[i] === filterRow[i + 1]) {\n        filterRow[i] *= 2;\n        filterRow[i + 1] = 0;\n        this.score += filterRow[i];\n      }\n    }\n\n    filterRow = this.filterZero(filterRow);\n\n    while (filterRow.length < 4) {\n      filterRow.push(0);\n    }\n\n    return filterRow;\n  }\n\n  filterZero(row) {\n    return row.filter((item) => item !== 0);\n  }\n\n  updateTile(tile, num) {\n    tile.innerText = '';\n    tile.classList.value = '';\n    tile.classList.add('field__cell');\n\n    if (num > 0) {\n      tile.innerText = num;\n      tile.classList.add('field__cell--' + num.toString());\n    }\n  }\n\n  updateScore(el) {\n    el.innerText = this.score;\n  }\n\n  setTwo() {\n    if (!this.hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const r = Math.floor(Math.random() * 4);\n      const c = Math.floor(Math.random() * 4);\n\n      if (this.state[r][c] === 0) {\n        const value = Math.random() < 0.9 ? 2 : 4;\n\n        this.state[r][c] = value;\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyTile() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isWin(state) {\n    state.forEach((row) => {\n      row.forEach((col) => {\n        if (col === 2048) {\n          this.status = 'win';\n        }\n      });\n    });\n  }\n\n  isLose() {\n    for (const row of this.state) {\n      if (row.some((i) => i === 0)) {\n        return false;\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let c = 0; c < 4; c++) {\n      const row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","initializeBoard","inicialState","state","map","row","futureState","score","status","startGame","board","i","push","Array","fill","isEqual","fututreState","length","col","moveLeft","r","slide","setTwo","isWin","isLose","moveRight","reverse","moveUp","c","moveDown","getScore","getState","getStatus","setBestScore","user","localStorage","setItem","getBestScore","getItem","start","restart","filterRow","filterZero","filter","item","updateTile","tile","num","innerText","classList","value","add","toString","updateScore","el","hasEmptyTile","found","Math","floor","random","forEach","some","$09e991522ca7e64e$var$gameRefs","document","querySelector","best","rows","querySelectorAll","field","messageWin","messageLose","messageStart","$09e991522ca7e64e$var$countKeyPress","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$updateElement","getElementById","addEventListener","textContent","remove","e","key","preventDefault","code","window"],"version":3,"file":"index.62c77362.js.map"}